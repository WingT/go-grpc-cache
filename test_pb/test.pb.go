// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package test_pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestRequest struct {
	Enable               bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *TestRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TestRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type TestResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "test.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "test.TestResponse")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4b, 0xf3, 0x40,
	0x10, 0xc5, 0xd9, 0x2f, 0xfd, 0x8a, 0x8e, 0x05, 0xdb, 0x41, 0x24, 0x78, 0x0a, 0x39, 0x48, 0x2e,
	0x4d, 0x44, 0x2f, 0x8a, 0x9e, 0x44, 0x8f, 0x5e, 0xd6, 0x8a, 0xe0, 0x45, 0x36, 0xeb, 0x90, 0x06,
	0xed, 0x6e, 0xdc, 0x9d, 0x08, 0xfd, 0xe3, 0x05, 0xc9, 0xae, 0x60, 0xaf, 0xb9, 0xbd, 0x37, 0xf0,
	0xde, 0xef, 0xc1, 0x00, 0x30, 0x79, 0x2e, 0x3b, 0x67, 0xd9, 0xe2, 0x64, 0xd0, 0xf9, 0x03, 0x1c,
	0xac, 0xc8, 0xb3, 0xa4, 0xcf, 0x9e, 0x3c, 0xe3, 0x31, 0x4c, 0xc9, 0xa8, 0xfa, 0x83, 0x52, 0x91,
	0x89, 0x62, 0x4f, 0xfe, 0x3a, 0x3c, 0x82, 0xff, 0xda, 0xf6, 0x86, 0xd3, 0x7f, 0x99, 0x28, 0x12,
	0x19, 0x0d, 0xce, 0x21, 0x79, 0xa7, 0x6d, 0x9a, 0x64, 0xa2, 0xd8, 0x97, 0x83, 0xcc, 0x73, 0x98,
	0xc5, 0x3a, 0xdf, 0x59, 0xe3, 0x09, 0x11, 0x26, 0x6f, 0x8a, 0x55, 0x68, 0x9b, 0xc9, 0xa0, 0xcf,
	0xbf, 0x45, 0x64, 0x3e, 0x92, 0xfb, 0x6a, 0x35, 0xe1, 0x35, 0xcc, 0x83, 0x65, 0x47, 0x6a, 0x73,
	0x1f, 0x79, 0x8b, 0x32, 0x2c, 0xdd, 0x99, 0x76, 0x82, 0xbb, 0xa7, 0x58, 0x7f, 0x26, 0xf0, 0x12,
	0x0e, 0x87, 0xcb, 0x93, 0x51, 0x6e, 0x3b, 0x2a, 0x8b, 0x37, 0xb0, 0xf8, 0xc3, 0xde, 0xb5, 0x7e,
	0x1c, 0xf7, 0x2a, 0x8e, 0x0e, 0xdc, 0x71, 0xe1, 0xdb, 0xe2, 0xe5, 0xb4, 0x69, 0x79, 0xdd, 0xd7,
	0xa5, 0xb6, 0x9b, 0xea, 0xb9, 0x35, 0xcd, 0xaa, 0x6a, 0xec, 0xb2, 0x71, 0x9d, 0x5e, 0x6a, 0xa5,
	0xd7, 0x54, 0x0d, 0x99, 0xd7, 0xae, 0xae, 0xa7, 0xe1, 0x53, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xbb, 0x50, 0xca, 0x63, 0xb7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	TestStreamEnable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamEnableClient, error)
	TestUnaryEnable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestStreamDisable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamDisableClient, error)
	TestUnaryDisable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestStreamEnable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamEnableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/test.TestService/TestStreamEnable", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamEnableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamEnableClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestStreamEnableClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamEnableClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestUnaryEnable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/test.TestService/TestUnaryEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestStreamDisable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamDisableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/test.TestService/TestStreamDisable", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamDisableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamDisableClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestStreamDisableClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamDisableClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestUnaryDisable(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/test.TestService/TestUnaryDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	TestStreamEnable(*TestRequest, TestService_TestStreamEnableServer) error
	TestUnaryEnable(context.Context, *TestRequest) (*TestResponse, error)
	TestStreamDisable(*TestRequest, TestService_TestStreamDisableServer) error
	TestUnaryDisable(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) TestStreamEnable(req *TestRequest, srv TestService_TestStreamEnableServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamEnable not implemented")
}
func (*UnimplementedTestServiceServer) TestUnaryEnable(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUnaryEnable not implemented")
}
func (*UnimplementedTestServiceServer) TestStreamDisable(req *TestRequest, srv TestService_TestStreamDisableServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamDisable not implemented")
}
func (*UnimplementedTestServiceServer) TestUnaryDisable(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUnaryDisable not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_TestStreamEnable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStreamEnable(m, &testServiceTestStreamEnableServer{stream})
}

type TestService_TestStreamEnableServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServiceTestStreamEnableServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamEnableServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestUnaryEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestUnaryEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/TestUnaryEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestUnaryEnable(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestStreamDisable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStreamDisable(m, &testServiceTestStreamDisableServer{stream})
}

type TestService_TestStreamDisableServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServiceTestStreamDisableServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamDisableServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestUnaryDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestUnaryDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/TestUnaryDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestUnaryDisable(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestUnaryEnable",
			Handler:    _TestService_TestUnaryEnable_Handler,
		},
		{
			MethodName: "TestUnaryDisable",
			Handler:    _TestService_TestUnaryDisable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStreamEnable",
			Handler:       _TestService_TestStreamEnable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestStreamDisable",
			Handler:       _TestService_TestStreamDisable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}
